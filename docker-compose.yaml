networks:
  production:

services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: []
    env_file:
      - .env
    networks:
      - production
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
    container_name: backend
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=${ASPNETCORE_CONNECTIONSTRING}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    env_file:
      - .env
    networks:
      - production
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -qO- http://localhost:${BACKEND_PORT}/health || exit 1',
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    restart: unless-stopped
    ports:
      - '${FRONTEND_PORT}:${FRONTEND_PORT}'
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    env_file:
      - ./frontend/.env.local
      - ./frontend/.env.production
      - .env
    depends_on:
      - backend
    networks:
      - production
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:${FRONTEND_PORT} || exit 1']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - '${NGINX_PORT}:${NGINX_PORT}'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - production
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f http://localhost:${NGINX_PORT}/health-check || exit 1',
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  pgdata:
